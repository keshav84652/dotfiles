#!/bin/bash

# Common Functions for Dotfiles Scripts
# Source this file in other scripts to use shared utilities

# Colors for output
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[1;37m'
export NC='\033[0m' # No Color

# Status tracking
INSTALL_LOG_FILE="$HOME/dotfiles-install-$(date +%Y%m%d_%H%M%S).md"
SUCCESS_COUNT=0
WARNING_COUNT=0
ERROR_COUNT=0

# Initialize log file
init_log() {
    cat > "$INSTALL_LOG_FILE" << EOF
# Dotfiles Installation Report
**Date:** $(date)
**User:** $USER
**System:** $(lsb_release -d 2>/dev/null | cut -f2 || echo "Unknown Linux")

## Installation Summary

EOF
}

# Function to print colored output and log
print_success() {
    echo -e "${GREEN}✓${NC} $1"
    echo "- ✅ $1" >> "$INSTALL_LOG_FILE"
    ((SUCCESS_COUNT++))
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
    echo "- ⚠️ **WARNING:** $1" >> "$INSTALL_LOG_FILE"
    ((WARNING_COUNT++))
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
    echo "- ℹ️ $1" >> "$INSTALL_LOG_FILE"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
    echo "- ❌ **ERROR:** $1" >> "$INSTALL_LOG_FILE"
    ((ERROR_COUNT++))
}

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
    echo -e "\n## $1\n" >> "$INSTALL_LOG_FILE"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if package is installed (apt)
package_installed() {
    dpkg -l "$1" >/dev/null 2>&1
}

# Function to check if snap package is installed
snap_installed() {
    snap list "$1" >/dev/null 2>&1
}

# Function to validate dependencies
validate_dependencies() {
    local script_name="$1"
    shift
    local deps=("$@")
    local missing_deps=()
    
    print_info "Validating dependencies for $script_name..."
    
    for dep in "${deps[@]}"; do
        if ! command_exists "$dep"; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing dependencies: ${missing_deps[*]}"
        print_error "Please install missing dependencies before running $script_name"
        return 1
    fi
    
    print_success "All dependencies satisfied for $script_name"
    return 0
}

# Function to add manual task to log
add_manual_task() {
    echo "- 📋 **MANUAL TASK:** $1" >> "$INSTALL_LOG_FILE"
}

# Function to add next step to log
add_next_step() {
    echo "- 🔄 **NEXT STEP:** $1" >> "$INSTALL_LOG_FILE"
}

# Function to finalize log with summary
finalize_log() {
    local script_name="${1:-Script}"
    
    cat >> "$INSTALL_LOG_FILE" << EOF

---

## Final Summary for $script_name

- **Successful operations:** $SUCCESS_COUNT
- **Warnings:** $WARNING_COUNT  
- **Errors:** $ERROR_COUNT

EOF

    if [ $ERROR_COUNT -gt 0 ]; then
        cat >> "$INSTALL_LOG_FILE" << EOF
### ❌ Action Required
Some operations failed. Please review the errors above and fix them manually.

EOF
    fi
    
    if [ $WARNING_COUNT -gt 0 ]; then
        cat >> "$INSTALL_LOG_FILE" << EOF
### ⚠️ Warnings
Some operations completed with warnings. Review them to ensure everything works as expected.

EOF
    fi
    
    cat >> "$INSTALL_LOG_FILE" << EOF
### 📄 Log Location
This report is saved at: \`$INSTALL_LOG_FILE\`

You can delete this file after reviewing it.

---
*Generated by dotfiles automation system*
EOF

    echo ""
    print_success "$script_name completed!"
    print_info "Full report saved to: $INSTALL_LOG_FILE"
    
    if [ $ERROR_COUNT -gt 0 ] || [ $WARNING_COUNT -gt 0 ]; then
        print_warning "Please review the report for any issues that need attention"
    fi
}

# Function to safely run commands with error handling
safe_run() {
    local description="$1"
    shift
    local cmd=("$@")
    
    print_info "Running: $description..."
    
    if "${cmd[@]}" >/dev/null 2>&1; then
        print_success "$description"
        return 0
    else
        print_error "Failed: $description"
        return 1
    fi
}

# Function to create backup
create_backup() {
    local file="$1"
    local backup_dir="$2"
    
    if [ -f "$file" ] && [ ! -L "$file" ]; then
        cp "$file" "$backup_dir/"
        print_success "Backed up $(basename "$file")"
        return 0
    fi
    
    return 1
}

# Function to prompt user for confirmation
confirm_action() {
    local message="$1"
    local response
    
    echo -e "${YELLOW}$message${NC}"
    read -p "Continue? (y/N): " response
    
    case "$response" in
        [yY]|[yY][eE][sS])
            return 0
            ;;
        *)
            print_warning "Action cancelled by user"
            return 1
            ;;
    esac
}

# Function to check system requirements
check_system_requirements() {
    print_header "System Requirements Check"
    
    # Check Ubuntu version
    if command_exists lsb_release; then
        local version=$(lsb_release -rs)
        if [[ "$version" == "24.04" || "$version" == "22.04" || "$version" == "20.04" ]]; then
            print_success "Ubuntu $version detected (supported)"
        else
            print_warning "Ubuntu $version detected (may not be fully supported)"
        fi
    else
        print_warning "Could not detect Ubuntu version"
    fi
    
    # Check available disk space (at least 2GB)
    local available_space=$(df / | awk 'NR==2 {print $4}')
    if [ "$available_space" -gt 2097152 ]; then # 2GB in KB
        print_success "Sufficient disk space available"
    else
        print_warning "Low disk space - some installations may fail"
    fi
    
    # Check internet connectivity
    if ping -c 1 google.com >/dev/null 2>&1; then
        print_success "Internet connectivity verified"
    else
        print_error "No internet connection - downloads will fail"
        return 1
    fi
    
    # Check if running as root (should not be)
    if [ "$EUID" -eq 0 ]; then
        print_error "Do not run as root - use regular user account"
        return 1
    else
        print_success "Running as regular user (correct)"
    fi
    
    return 0
}

# Export functions for use in other scripts
export -f print_success print_warning print_info print_error print_header
export -f command_exists package_installed snap_installed validate_dependencies
export -f add_manual_task add_next_step finalize_log safe_run create_backup
export -f confirm_action check_system_requirements init_log